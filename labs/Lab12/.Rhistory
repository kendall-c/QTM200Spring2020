cor(SurveyClean$hrs_extracurricular, SurveyClean$GPA)
cor(SurveyClean$hrs_extracurricular, SurveyClean$GPA)
cor.test(SurveyClean$hrs_extracurricular, SurveyClean$GPA)
#linear regression equation
HRS_GPA <- lm(SurveyClean$GPA~SurveyClean$hrs_extracurricular)
summary(HRS_GPA)
summary(HRS_GPA)
#confidence intervals for B0 and B1
confint(HRS_GPA)
confint(HRS_GPA)
#histogram of standardized residuals
hist(rstandard(HRS_GPA), main="Distribution of Standardized Residuals", xlab="Standardized Residuals")
#qq plot of standardized residuals
qqnorm(rstandard(HRS_GPA), main="Standardized Residuals")
plot(SurveyClean$hrs_extracurricular,rstandard(HRS_GPA), xlab="Hours Spent per Week on Extracurriculars", ylab="Standardized Residuals of yhat = 3.374309 + 0.007707x")
plot(SurveyClean$hrs_extracurricular,rstandard(HRS_GPA), xlab="Hours Spent per Week on Extracurriculars", ylab="Standardized Residuals of the line")
#veiwing student one's stats
SurveyClean$GPA[1]
predict(HRS_GPA)[1]
resid(HRS_GPA)[1]
rstandard(HRS_GPA)[1]
SurveyClean$hrs_extracurricular[1]
#veiwing student one's stats
SurveyClean$GPA[1]
SurveyClean$hrs_extracurricular[1]
predict(HRS_GPA)[1]
predict(HRS_GPA)[1]
resid(HRS_GPA)[1]
rstandard(HRS_GPA)[1]
#two variable linear regression
pairs(~ GPA + sleep + days_drink , data=SurveyClean)
SleepDrink_GPA <- lm(GPA ~ sleep + days_drink , data=SurveyClean)
summary(SleepDrink_GPA)
#two variable linear regression
pairs(~ GPA + sleep + days_drink , data=SurveyClean)
SleepDrink_GPA <- lm(GPA ~ sleep + days_drink , data=SurveyClean)
summary(SleepDrink_GPA)
pairs(~ GPA + hrs_extracurricular + Emory_FirstChoice , data=SurveyClean)
HrsFC_GPA <- lm(GPA ~ hrs_extracurricular + Emory_FirstChoice , data=SurveyClean)
pairs(~ GPA + sleep + days_drink , data=SurveyClean)
HrsFC_GPA <- lm(GPA ~ hrs_extracurricular + Emory_FirstChoice , data=SurveyClean)
summary(HrsFC_GPA)
summary(HrsFC_GPA)
confint(HrsFC_GPA)
#Question 1
#a) Calculate the x^2 statistic by hand.
#H0: The variables are statistically independent.
#Ha: The variables are statistically dependent.
#Recreate table in R:
bribe.table <- matrix(c(14, 6, 7, 27, 7, 7, 1, 15, 21, 13, 8, 42), ncol=4, byrow = TRUE)
rownames(bribe.table) <- c("Upper class", "Lower class", "Total")
colnames(bribe.table) <- c("Not stopped", "Bribe requested", "Stopped/given warning", "Total")
bribe.table <- as.table(bribe.table)
bribe.table
#The table already has fo (the raw count observed frequency). Find the fe (expected frequency) for each value.
#fe = ((row total)/(grand total))*(column total)
#upper class, not stopped:
(27/42)*21
#13.5
#upper class, bribe requested:
(27/42)*13
#8.36
#upper class, stopped/given warning:
(27/42)*8
#5.14
#lower class, not stopped:
(15/21)*21
#15
#lower class, bribe requested:
(15/42)*13
#4.64
#lower class, stopped/given warning:
(15/42)*8
#2.88
bribe.expected <- matrix(c(13.5, 8.36, 5.14, 15, 4.64, 2.88), ncol=3, byrow = TRUE)
rownames(bribe.expected) <- c("Upper class", "Lower class")
colnames(bribe.expected) <- c("Not stopped", "Bribe requested", "Stopped/given warning")
bribe.expected <- as.table(bribe.expected)
bribe.expected
bribes <- matrix(c(14, 6, 7, 7, 7, 1), ncol=3, byrow = TRUE)
chisq.values <- (((bribes - bribe.expected)^2)/bribe.expected)
sum(chisq.values)
#The x^2 test statistic is 8.052.
#Double-check with the chisqu function:
chisq.test(bribes)
(15/42)*21
bribe.expected <- matrix(c(13.5, 8.36, 5.14, 7.5, 4.64, 2.88), ncol=3, byrow = TRUE)
rownames(bribe.expected) <- c("Upper class", "Lower class")
colnames(bribe.expected) <- c("Not stopped", "Bribe requested", "Stopped/given warning")
bribe.expected <- as.table(bribe.expected)
bribe.expected
bribes <- matrix(c(14, 6, 7, 7, 7, 1), ncol=3, byrow = TRUE)
chisq.values <- (((bribes - bribe.expected)^2)/bribe.expected)
sum(chisq.values)
df <- 2
pchisq(3.818, df = 2, lower.tail = FALSE)
(sqrt((13.5*(1-14/27)(1-14/21))))
sqrt((13.5*(1-14/27)(1-14/21)))
sqrt((13.5*(1-14/27)*(1-14/21)))
(14-13.5)/sqrt((13.5*(1-14/27)*(1-14/21)))
(14-13.5)/sqrt((13.5*(1-27/42)*(1-21/42)))
read.csv(women)
library(readr)
women <- read_csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
View(women)
(sum.water - mean.water)*(sum.reserved - mean.reserved)
mean.reserved <- mean(women$reserved)
mean.water <- mean(women$water)
#Sum reserved and water
sum.reserved <- sum(women$reserved)
sum.water <- sum(women$water)
#Find slope:
(sum.water - mean.water)*(sum.reserved - mean.reserved)
sum((women$water - mean(women$water))*(women$reserved - mean(women$reserved))
#Question 3
#1) Import the data set and obtain summary statistics and examine the distribution of the overall lifespan of the fruitflies.
summary(fruitfly)
boxplot(fruitfly$lifespan)
#2) Plot lifespan vs. thorax. Does it look like there is a linear relationship? What is the correlation coefficient between these two variables?
lifespan.thorax <- plot(fruitfly$lifespan, fruitfly$thorax)
cor(fruitfly$lifespan, fruitfly$thorax)
#It looks like there may be a weak, positive linear relationship between fruitfly lifespan and thorax length.
#The correlation coefficient is 0.636.
#3) Regress lifespan on thorax. Interpret the slope of the fitted model.
lm(fruitfly$thorax ~ fruitfly$lifespan)
#Each additional 1 mm increase in the length of the fly's thorax is associated with an increase of 0.0028 days in lifespan.
#4) Test for a significant linear relationship between lifespan and thorax. Provde and interpret your results of your test.
n <- dim(fruitfly)
t.stat <- (0.636*sqrt(n-2))/sqrt(1-0.636^2)
#The test statistic is 9.14. Now get p-value:
2*pt(t.stat, n-2, lower.tail = FALSE)
#The p-value is 1.497e-15. This is very small, meaning we can reject the null hypothesis that the true correlation between lifespan and thorax length is 0.
#5. Provide the 90% confidence interval for the slope of the fitted model.
confint()
sum((women$water - mean(women$water))*(women$reserved - mean(women$reserved)))
sum((women$reserved - mean(women$reserved))^2)
664.1056/71.7764
mean.water - 9.252(mean.reserved)
alpha <- mean.water - 9.252(mean.reserved)
alpha <- mean.water - 9.252*(mean.reserved)
alpha
lm(women$reserved~women$water, data=women)
lm(women$water~women$reserved, data=women)
summary(fruitfly)
lifespan.thorax <- plot(fruitfly$lifespan, fruitfly$thorax)
lifespan.thorax
lifespan.thorax
fruitfly <- read_csv("~/GitHub/QTM200Spring2020/problem_sets/PS2/fruitfly.csv")
View(fruitfly)
summary(fruitfly)
boxplot(fruitfly$lifespan)
#2) Plot lifespan vs. thorax. Does it look like there is a linear relationship? What is the correlation coefficient between these two variables?
lifespan.thorax <- plot(fruitfly$lifespan, fruitfly$thorax)
lifespan.thorax
lifespan.thorax
lifespan.thorax
lifespan.thorax <- plot(fruitfly$lifespan, fruitfly$thorax)
lifespan.thorax
fruitfly <- read_csv("~/GitHub/QTM200Spring2020/problem_sets/PS2/fruitfly.csv")
View(fruitfly)
summary(fruitfly)
boxplot(fruitfly$lifespan)
#2) Plot lifespan vs. thorax. Does it look like there is a linear relationship? What is the correlation coefficient between these two variables?
lifespan.thorax <- plot(fruitfly$lifespan, fruitfly$thorax)
lifespan.thorax
lifespan.thorax
cor(fruitfly$lifespan, fruitfly$thorax)
lm(fruitfly$lifespan~fruitfly$thorax)
lm(fruitfly$thorax-fruitfly$lifespan)
lm(fruitfly$thorax~fruitfly$lifespan)
lm(fruitfly$thorax~fruitfly$lifespan)
lifespan.regress <- lm(fruitfly$thorax~fruitfly$lifespan)
#Each additional day a fruitfly lives is associated with, on average, a 0.0028 mm increase in the length of its thorax.
#4) Test for a significant linear relationship between lifespan and thorax.Provide and interpret your results of your test.
summary(lifespan.regress)
cor(fruitfly$lifespan, fruitfly$thorax)
beta.estimate <- 0.0028
st.error <- 0.0003
t.stat <- beta.estimate/st.error
t.stat
2*pt(-abs(t.stat), n-2, lower.tail = FALSE)
2*pt(-abs(t.stat), df=nrow(fruitfly)-ncol(fruitfly))
confint(lifespan.regress, level=.95)
confint(lifespan.regress, level=.9)
n <- dim(fruitfly)
alpha <- 0.6597
beta <- 0.0028
se_alpha <- 0.0184
se_beta <- 0.0003
t.stat.a <- alpha/se_alpha
t.stat.b <- beta/se_beta
2*pt(-abs(t.stat.a), df=nrow(fruitfly)-ncol(fruitfly))
2*pt(-abs(t.stat.b), df=nrow(fruitfly)-ncol(fruitfly))
lifespan.thorax <- plot(fruitfly$lifespan, fruitfly$thorax)
lifespan.thorax
predict(lifespan.regress, fruitfly$thorax=0.8)
predict(lifespan.regress)
predict(lifespan.regress, 0.8)
predict(lifespan.regress, 0.8)
thorax.pred <- data.frame(fruitfly$thorax=0.8)
predict(lifespan.regress, newdata = thorax.pred, interval = 'confidence')
thorax.pred <- data.frame(fruitfly$thorax=0.8)
thorax.pred <- data.frame(thorax=0.8)
predict(lifespan.regress, newdata = thorax.pred, interval = 'confidence')
thorax.pred <- lifespan.regress; thorax.pred$thorax <- 0.8
predict(lifespan.regress, newdata = thorax.pred, se.fit=T)
thorax.pred <- lifespan.regress; thorax.pred$thorax <- 0.8
predict(lifespan.regress, newdata = thorax.pred, se.fit=T)
predict(lm(fruitfly$thorax~fruitfly$lifespan), newdata = thorax.pred, se.fit=T)
thorax.pred <- fruitfly; thorax.pred$thorax <- 0.8
predict(lm(fruitfly$thorax~fruitfly$lifespan), newdata = thorax.pred, se.fit=T)
predict(lm(fruitfly$thorax~fruitfly$lifespan), newdata = thorax.pred, se.fit=T)
predict(lifespan.regress, newdata = thorax.pred, se.fit=T)
predict(lifespan.regress, newdata = thorax.pred, interval="confidence", level-0.95)
predict(lifespan.regress, newdata = thorax.pred, interval="confidence", level=0.95)
predict(lm(fruitfly$thorax~fruitfly$lifespan), newdata = thorax.pred, interval="confidence", level=0.95)
predict(lm(fruitfly$thorax~fruitfly$lifespan), newdata=thorax.pred, interval = "prediction", level=0.95)
plot(thorax.pred)
lifespan.res <- resid(lifespan.regress)
lifespan.res <- resid(lifespan.regress)
plot(fruitfly$lifespan, lifespan.res, ylab="Residuals", xlab="Lifespan")
abline(a=0.6597, b=0.0028)
plot(fruitfly$lifespan, lifespan.res, ylab="Residuals", xlab="Lifespan")
abline(a=0.6597, b=0.0028)
bribe.table <- matrix(c(14, 6, 7, 27, 7, 7, 1, 15, 21, 13, 8, 42), ncol=4, byrow = TRUE)
rownames(bribe.table) <- c("Upper class", "Lower class", "Total")
colnames(bribe.table) <- c("Not stopped", "Bribe requested", "Stopped/given warning", "Total")
bribe.table <- as.table(bribe.table)
bribe.table
#The table already has fo (the raw count observed frequency). Find the fe (expected frequency) for each value.
#fe = ((row total)/(grand total))*(column total)
#upper class, not stopped:
(27/42)*21
#13.5
#upper class, bribe requested:
(27/42)*13
#8.36
#upper class, stopped/given warning:
(27/42)*8
#5.14
#lower class, not stopped:
(15/42)*21
#15
#lower class, bribe requested:
(15/42)*13
#4.64
#lower class, stopped/given warning:
(15/42)*8
#2.88
bribe.expected <- matrix(c(13.5, 8.36, 5.14, 7.5, 4.64, 2.88), ncol=3, byrow = TRUE)
rownames(bribe.expected) <- c("Upper class", "Lower class")
colnames(bribe.expected) <- c("Not stopped", "Bribe requested", "Stopped/given warning")
bribe.expected <- as.table(bribe.expected)
bribe.expected
bribes <- matrix(c(14, 6, 7, 7, 7, 1), ncol=3, byrow = TRUE)
chisq.values <- (((bribes - bribe.expected)^2)/bribe.expected)
sum(chisq.values)
#The x^2 test statistic is 3.818.
#Double-check with the chisquare function:
chisq.test(bribes)
#b) Now calculate the p-value. We can use df = (rows -1)(columns - 1)
#df = (2-1)(3-1)
df <- 2
pchisq(3.818, df = 2, lower.tail = FALSE)
#The p-value is 0.148. If alpha is 0.1, we cannot reject the null hypothesis at this time.
#c) Calculate the standardized residuals for each cell.
#standardized residuals = (fo - fe)/(fe(sq(1- row prop.)(1-col prop.)))
#upper class, not stopped:
(14-13.5)/sqrt((13.5*(1-27/42)*(1-21/42)))
(6-8.36)/sqrt((8.36*(1-27/42)*(1-13/42)))
(7-5.14)/sqrt((5.14*(1/27/42)*(1-8/42)))
(7-5.14)/sqrt((5.14*(1-27/42)*(1-8/42)))
(7-7.5)/sqrt((7.5*(1-15/42)*(1-21/42)))
(7-4.64)/sqrt((4.64*(1-15/42)*(1-13/42)))
(1-2.88)/sqrt((2.88*(1-15/42)*(1-8/42)))
lifespan.thorax
lifespan.thorax <- plot(fruitfly$lifespan, fruitfly$thorax)
lifespan.thorax
plot(fruitfly$lifespan, lifespan.res, ylab="Residuals", xlab="Lifespan")
abline(a=0.6597, b=0.0028)
library(readr)
incumbents_subset <- read_csv("~/GitHub/QTM200Spring2020/problem_sets/PS3/incumbents_subset.csv")
View(incumbents_subset)
lm(incumbents_subset$voteshare ~ incumbents_subset$difflog)
difflog_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$difflog)
plot(difflog_reg)
plot(incumbents_subset$difflog, incumbents_subset$voteshare)
plot(incumbents_subset$difflog, incumbents_subset$voteshare, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
plot(incumbents_subset$difflog, incumbents_subset$voteshare, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(difflog_reg)
summary(lm(incumbents_subset$presvote ~ incumbents_subset$difflog))
prevote_reg <- lm(incumbents_subset$difflog, incumbents_subset$presvote, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
prevote_reg <- lm(incumbents_subset$difflog, incumbents_subset$presvote)
plot(incumbents_subset$difflog, incumbents_subset$presvote, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
voteshare_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$difflog)
plot(incumbents_subset$difflog, incumbents_subset$voteshare, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(voteshare_reg)
presvote_reg <- lm(incumbents_subset$presvote ~ incumbents_subset$difflog)
plot(incumbents_subset$difflog, incumbents_subset$presvote, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(presvote_reg)
summary(lm(incumbents_subset$voteshare ~ incumbents_subset$presvote))
presshare_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$presvote)
plot(incumbents_subset$presvote, incumbents_subset$voteshare, xlab = "Party's Presidential Vote Share", ylab = "Incumbent Vote Share")
abline(presshare_reg)
q1.resid <- resid(voteshare_reg)
q2.resid <- resid(presvote_reg)
resid_reg <- lm(q1.resid ~ q2.resid)
summary(resid_reg)
plot(q2.resid, q1.resid, xlab = "Party Presidential Vote Share Residuals", ylab = "Incumbent Vote Share Residuals")
abline(resid_reg)
multi_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$difflog + incumbents_subset$presvote, data=incumbents_subset)
summary(multi_reg)
summary(resid_reg)
summary(lm(incumbents_subset$voteshare ~ incumbents_subset$difflog))
summary(lm(incumbents_subset$presvote ~ incumbents_subset$difflog))
summary(lm(incumbents_subset$voteshare ~ incumbents_subset$presvote))
summary(resid_reg)
summary(multi_reg)
mean(resid(resid_reg))
mean(resid(multi_reg))
voteshare_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$difflog)
pdf("Q1plot.pdf")
plot(incumbents_subset$difflog, incumbents_subset$voteshare, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(voteshare_reg)
dev.off()
library(readr)
incumbents_subset <- read_csv("~/GitHub/QTM200Spring2020/problem_sets/PS3/incumbents_subset.csv")
View(incumbents_subset)
#Question 1: Difflog and Voteshare
#a) Run a regression where the outcome variable is voteshare and the explanatory variable is difflog.
summary(lm(incumbents_subset$voteshare ~ incumbents_subset$difflog))
#b) Make a scatterplot of the two variables and add the regression line.
voteshare_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$difflog)
pdf("Q1plot.pdf")
plot(incumbents_subset$difflog, incumbents_subset$voteshare, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(voteshare_reg)
dev.off()
plot(incumbents_subset$difflog, incumbents_subset$voteshare, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
library(readr)
incumbents_subset <- read_csv("~/GitHub/QTM200Spring2020/problem_sets/PS3/incumbents_subset.csv")
View(incumbents_subset)
#Question 1: Difflog and Voteshare
#a) Run a regression where the outcome variable is voteshare and the explanatory variable is difflog.
summary(lm(incumbents_subset$voteshare ~ incumbents_subset$difflog))
#b) Make a scatterplot of the two variables and add the regression line.
voteshare_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$difflog)
pdf("Q1plot.pdf")
plot(incumbents_subset$difflog, incumbents_subset$voteshare, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(voteshare_reg)
dev.off()
#c) Save the residuals of the model in a separate object.
q1.resid <- resid(voteshare_reg)
#d) Write the prediction equation.
# y = 0.579 + 0.416x
#Question 2: Difflog and Presvote
#a) Run a regression where the outcome variable is presvote and the explanatory variable is difflog.
summary(lm(incumbents_subset$presvote ~ incumbents_subset$difflog))
#b) Make a scatterplot of the two variables and add the regression line.
presvote_reg <- lm(incumbents_subset$presvote ~ incumbents_subset$difflog)
pdf("Q2plot.pdf")
plot(incumbents_subset$difflog, incumbents_subset$presvote, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(presvote_reg)
dev.off()
#c) Save the residuals of the model in a separate object.
q2.resid <- resid(presvote_reg)
#d) Write the prediction equation.
# y = 0.508 + 0.238x
#Question 3: Preshare and Voteshare
#a) Run a regression where the outcome variable is voteshare and the explanatory variable is presvote.
summary(lm(incumbents_subset$voteshare ~ incumbents_subset$presvote))
#b) Make a scatterplot of the two variables and add the regression line.
presshare_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$presvote)
pdf("Q3plot.pdf")
plot(incumbents_subset$presvote, incumbents_subset$voteshare, xlab = "Party's Presidential Vote Share", ylab = "Incumbent Vote Share")
abline(presshare_reg)
dev.off()
#c) Write the prediction equation.
# y = 0.441 + 0.388x
#Question 4: Residuals
#a) Run a regression where the outcome variable is the residuals from Question 1 and the explanatory variable is the residuals from Question 2.
resid_reg <- lm(q1.resid ~ q2.resid)
summary(resid_reg)
#b) Make a scatterplot of the two residuals and add the regression line.
pdf("Q4plot.pdf")
plot(q2.resid, q1.resid, xlab = "Party Presidential Vote Share Residuals", ylab = "Incumbent Vote Share Residuals")
abline(resid_reg)
dev.off()
#c) Write the prediction equation.
# y = -4.860e-18 + 2.569e-01x
#Question 5: Multivariate Regression
#a) Run a regression where the outcome variable is the incumbent's voteshare and the explanatory variables are difflog and presvote.
multi_reg <- lm(incumbents_subset$voteshare ~ incumbents_subset$difflog + incumbents_subset$presvote, data=incumbents_subset)
summary(multi_reg)
#b) Write the prediction equation.
# y = 0.449 + 0.355(x1) + 0.257(x2)
#c) What is it in this output that is identical to Question 4? Why is this the case?
#The residual standard error for both regressions are the exact same, at 0.0734.
#This is because the degrees of freedom in both models are the same (because there is the same
#number of observations), and because the mean of both model residuals is about zero.
pdf("plot3_a.pdf")
hist(fruitfly$lifespan, main="", xlab="Lifespan")
dev.off()
plot(incumbents_subset$difflog, incumbents_subset$voteshare, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(voteshare_reg)
plot(incumbents_subset$difflog, incumbents_subset$presvote, xlab = "Difference in Campaign Spending", ylab = "Incumbent Vote Share")
abline(presvote_reg)
plot(incumbents_subset$presvote, incumbents_subset$voteshare, xlab = "Party's Presidential Vote Share", ylab = "Incumbent Vote Share")
abline(presshare_reg)
plot(q2.resid, q1.resid, xlab = "Party Presidential Vote Share Residuals", ylab = "Incumbent Vote Share Residuals")
abline(resid_reg)
install.packages(car)
library(car)
data(Prestige)
help(Prestige)
library(car)
install.packages(car)
install.packages("car")
library("car")
data(Prestige)
help(Prestige)
library("car")
summary(Prestige)
Prestige$professional
view(Prestige)
view(Prestige)
Prestige$professional <- ifelse(Prestige$type=="prof", 1, 0)
view(Prestige$professional)
Prestige$professional
Prestige$type
Prestige$type
Prestige$professional
lm(Prestige ~ income + professional, data = Prestige)
lm(prestige ~ income + professional, data = Prestige)
lm(prestige ~ income + professional + income:professional, data = Prestige)
rm(list=ls())
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# set wd
setwd('~/Documents/GitHub/QTM200Spring2020/labs/Lab12')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("faraway"), pkgTest)
#######################
# Problems
#######################
# Some studies show that politically irrelevant events, such as
# sports events and shark attacks, affect voters' retrospective
# evaluation of government performance. For example, Busby et al.
# (2017) find that the outcome of a college football game affects
# presidental job approval among students.
load("Busby_Football.RData")
colnames(x)
load("/Users/kendall/GitHub/QTM200Spring2020/labs/Lab12/Busby_Football.RData")
load("Busby_Football.RData")
colnames(x)
setwd('~/GitHub/QTM200Spring2020/labs/Lab12')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("faraway"), pkgTest)
#######################
# Problems
#######################
# Some studies show that politically irrelevant events, such as
# sports events and shark attacks, affect voters' retrospective
# evaluation of government performance. For example, Busby et al.
# (2017) find that the outcome of a college football game affects
# presidental job approval among students.
load("Busby_Football.RData")
colnames(x)
lm(papprove ~ Post + osu + Post:osu, data=Busby_Football)
load("Busby_Football.RData")
colnames(x)
view(Busby_Football.RData)
lm(ppaprove ~ Post + osu + Post:osu, data=Busby_Football.RData)
help(Busby_Football.RData)
lm(ppaprove ~ Post + osu + Post:osu, data=x)
lm(papprove ~ Post + osu + Post:osu, data=x)
30.618 + 0.0014(1000) + 22.757(1) +-0.0023
30.618 + 0.0014(1000) + 22.757(1) + -0.0023
30.618 + 0.0014*(1000) + 22.757*(1) + -0.0023
30.618 + 0.0014*(6000) + 22.757*(1) + -0.0023
30.618 + 0.0014*(2000) + 22.757*(1) + -0.0023
56.173 - 54.773
30.618 + 0.0014*(6000) + 22.757*(0)
61.773 - 39.018
(0.042 - 0)/0.016
help(t.test)
n <- 30
#Find the test statistic:
(0.042 - 0)/0.016
#The test statistic is 2.625.
#Find the p-value:
2*pt(-abs(2.625), df=n-1)
(0.042 - 0)/0.013
2*pt(-abs(3.23), df=n2-1)
n2 <- 76
2*pt(-abs(3.23), df=n2-1)
